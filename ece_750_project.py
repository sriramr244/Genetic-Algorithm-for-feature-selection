# -*- coding: utf-8 -*-
"""ECE_750_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hCsLUO-jyptCVdzGjWn6hrX4xNLHg7Sc
Author: Sriram Ranganathan, Meng ECE Uwaterloo
### APPENDIX I (Data Cleaning code)
"""

import pandas as pd
import numpy as np
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import time

"""### Cardiac Arrest dataset cleaning and classification"""

df = pd.read_csv('/content/drive/MyDrive/ECE_750_data/C_A_D.csv')

df.head()

len(df)

out_types = df["Out"].unique()

set(df.Out)

mean_values = {}
outliers = []
for j in df.columns:
  mean_values[j] = {}
  mean = 0
  length = 1
  new_list = df[j]
  for k in range(0, len(new_list)):
    try:
      mean += int(new_list[k])
      length+=1

      
    except:
      outliers.append(new_list[k])
      continue
    
  mean = mean/length
  mean_values[j] = mean
print(set(outliers))

for j in df.columns:
  for i in set(outliers):
    df[j] = df[j].replace([i], mean_values[j])

for i in df.columns:
  for j in df[i]:
    for k in set(outliers):
      if j == k:
        print(i, j, k)

dtypes = {}
dtypes.update({k: np.float64 for k in df.columns})

df = df.astype(dtypes)

df.head()

df.to_csv('/content/drive/MyDrive/ECE_750_data/C_A_D_cleaned.csv', index=False)

new_df = pd.read_csv('/content/drive/MyDrive/ECE_750_data/C_A_D_cleaned.csv')

new_df.head()

Train_x = new_df.drop(columns=['Out'])

Train_x.head()

Train_y = df["Out"]

Train_y.head()

Train_x = Train_x.to_numpy()

Train_y = Train_y.to_numpy()

Train_x.shape

X_train, X_test, y_train, y_test = train_test_split(Train_x, Train_y, test_size=0.2)

clf = svm.SVC(C = 1, kernel = 'poly', gamma = 'auto')
start = time.time()
clf.fit(X_train, y_train)
print("Total time: ", time.time() - start, "seconds")
clf.score(X_test, y_test)

(0.03465723991394043* (2**279))/3.154e+7

"""### Breast Cancer Diagnostic Dataset cleaning and classifiction (SVM)"""

df_BC = pd.read_csv('/content/drive/MyDrive/ECE_750_data/B_C_cleaned.csv')

df_BC.head()

Train_x_BC = df_BC.drop(['Out'], axis =1)
Train_y_BC = df_BC.Out

dtypes = {}
dtypes.update({k: np.float64 for k in df_BC.drop(['Out'], axis =1)})

Train_x_BC = Train_x_BC.astype(dtypes)

Train_x_BC = Train_x_BC.to_numpy()

X_train_BC, X_test_BC, y_train_BC, y_test_BC = train_test_split(Train_x_BC, Train_y_BC, test_size=0.2)

clf_BC = RandomForestClassifier(max_depth=2, n_estimators= 200, random_state=0)
clf_BC.fit(X_train_BC, y_train_BC)
clf_BC.score(X_test_BC, y_test_BC)

"""### White wine quality Dataset cleaning and training SVM"""

df_white_wine = pd.read_csv('/content/drive/MyDrive/ECE_750_data/winequality-white.csv')

df_white_wine.head()

len(set(df_white_wine.quality))

Train_x_ww = df_white_wine.drop(['quality'], axis =1).to_numpy()
Train_y_ww = df_white_wine.quality.to_numpy()

X_train_ww, X_test_ww, y_train_ww, y_test_ww = train_test_split(Train_x_ww, Train_y_ww, test_size=0.2)

clf_ww = RandomForestClassifier(max_depth=50, n_estimators= 200, random_state=0)
#clf_ww = svm.SVC(C = 1, kernel = 'poly', gamma = 'auto')
clf_ww.fit(X_train_ww, y_train_ww)
clf_ww.score(X_test_ww, y_test_ww)
